<?php 
$name = $_POST['name'];
$email = $_POST['email'];
$message = $_POST['message']; 
// эти строки извлекают данные из запроса HTTP POST, отправленного формой. Он присваивает значения, отправленные через POST для полей «имя», «электронная почта» и «сообщение», соответствующим переменным PHP. php

var_dump($name,$email,$message);
 // var_dump используется для целей отладки. Он отображает на экране значения переменных PHP $name, $email и $message. Это полезно для проверки правильности получения данных формы.

$host = "localhost";
$dbname = "test_db";
$username= "root";
$password="";
// Эти строки определяют переменные, в которых хранятся сведения о соединении с базой данных MySQL. Он определяет имя хоста, имя базы данных, имя пользователя и пароль, необходимые для подключения к базе данных.

$conn = mysqli_connect  ($host, $username, $password, $dbname); 
// Эта строка пытается установить соединение с базой данных MySQL с помощью функции mysqli_connect. Он использует ранее определенные переменные для указания деталей соединения. Если соединение не удалось, оно отобразит сообщение об ошибке и завершит выполнение сценария.

if (mysqli_connect_errno()) {
	die("Connection error: " . mysqli_connect_error());
}
// Этот условный оператор проверяет, было ли соединение с базой данных успешным, используя mysqli_connect_errno(). Если возникает ошибка, он отображает сообщение об ошибке, содержащее описание ошибки, используя mysqli_connect_error(), и сценарий завершается.

echo "Соединение успешно." . "<br>";
//Если соединение с базой данных установлено успешно, в этой строке просто выводится «Соединение успешно», что указывает на то, что соединение с базой данных установлено успешно.


$sql = "INSERT INTO test (username,email,message)
        VALUES (?,?,?)";
// Эта строка определяет строку запроса SQL. Это оператор INSERT INTO, который определяет имя таблицы «test» и столбцы («имя пользователя», «электронная почта» и «сообщение»), в которые будут вставлены данные.

        $stmt = mysqli_stmt_init($conn);
// Эта строка инициализирует подготовленный оператор с помощью mysqli_stmt_init. Подготовленные операторы используются для безопасного выполнения SQL-запросов и предотвращения SQL-инъекций.


        if (! mysqli_stmt_prepare($stmt , $sql)) {
        	die(mysqli_error($conn));
        }
// Здесь он проверяет, был ли подготовленный оператор успешно создан с помощью mysqli_stmt_prepare. В случае сбоя (например, из-за синтаксической ошибки в SQL-запросе) отображается сообщение об ошибке MySQL и завершается выполнение сценария.

        mysqli_stmt_bind_param($stmt, "sss",
$username,
$email,
$message);
// Эта строка привязывает параметры к подготовленному оператору с помощью mysqli_stmt_bind_param. Аргумент «sss» указывает, что переменные $username, $email и $message являются строками.


mysqli_stmt_execute($stmt);
// This line executes the prepared statement, which inserts the data into the MySQL database.

echo "Запись сохранена." . "<br>";
// Наконец, если вставка данных прошла успешно, он печатает «Запись сохранена», чтобы указать, что запись была успешно вставлена в базу данных.






// Получите ввод пользователя
$userInput = $_POST['name'];

// Определите шаблон регулярного выражения для проверки чисел
$numbersPattern = '/[0-9]/';

// Определите шаблон регулярного выражения для проверки запрещенных символов.
$prohibitedPattern = '/[@#$%^&*()+=\[\]{}|~<>?\\\\]/';

// Проверьте цифры во входных данных
if (preg_match($numbersPattern, $userInput)) {
    echo "Ошибка: числа не допускаются во входных данных." . "<br>";
} 
// Проверьте наличие запрещенных символов во вводе
elseif (preg_match($prohibitedPattern, $userInput)) {
    echo "Ошибка: во входных данных нельзя использовать запрещенные символы." . "<br>";
} 
else {
    //Ввод действителен, продолжите обработку
    echo "NICE." . "<br>";
}




// Получите ввод пользователя
$userInput = $_POST['email'];

// Определите шаблон регулярного выражения для проверки запрещенных символов (за исключением @ и точки)
$prohibitedPattern = '/[^a-zA-Z0-9@. ]/';

// Проверьте наличие запрещенных символов во вводе
if (preg_match($prohibitedPattern, $userInput)) {
    echo "Ошибка: Запрещенные символы (кроме @ и точка) не допускаются во вводе." . "<br>";
} else {
    // Ввод действителен, продолжите обработку
    echo "NICE" . "<br>";
}



$userInput = $_POST['message'];

// Определите шаблон регулярного выражения для проверки чисел
$numbersPattern = '/[0-9]/';


$prohibitedPattern = '/[#$%^&*()\[\]{}|~<>\\\\]/';


if (preg_match($numbersPattern, $userInput)) {
    echo "Ошибка: числа не допускаются во входных данных." . "<br>";
} 

elseif (preg_match($prohibitedPattern, $userInput)) {
    echo "Ошибка: во входных данных нельзя использовать запрещенные символы." . "<br>";
} 
else {
   
    echo "NICE." . "<br>";
}


$userInput = $_POST['message'];

// Определить шаблон регулярного выражения для проверки запрещенных символов
// Разрешить @, ?, ., !, ", +, =, :, Нет., $, -, .
$allowedCharactersPattern = '/[@?!"+=:$\-\. ]/';

// Проверьте, есть ли во вводе запрещенные символы
if (preg_match('/[^a-zA-Z0-9@?!"+=:$\-\. ]/', $userInput)) {
    echo "Error." . "<br>";
} else {
    // Ввод действителен, продолжите обработку
    echo "NICE. " . "<br>";
}
?>

